// Code generated by counterfeiter. DO NOT EDIT.
package feedfakes

import (
	"context"
	"sync"

	"github.com/google/uuid"
	"github.com/sebnyberg/policefeed/feed"
)

type FakeEventLister struct {
	ListUniqueEventsStub        func(context.Context, []uuid.UUID) ([]feed.Event, error)
	listUniqueEventsMutex       sync.RWMutex
	listUniqueEventsArgsForCall []struct {
		arg1 context.Context
		arg2 []uuid.UUID
	}
	listUniqueEventsReturns struct {
		result1 []feed.Event
		result2 error
	}
	listUniqueEventsReturnsOnCall map[int]struct {
		result1 []feed.Event
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventLister) ListUniqueEvents(arg1 context.Context, arg2 []uuid.UUID) ([]feed.Event, error) {
	var arg2Copy []uuid.UUID
	if arg2 != nil {
		arg2Copy = make([]uuid.UUID, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.listUniqueEventsMutex.Lock()
	ret, specificReturn := fake.listUniqueEventsReturnsOnCall[len(fake.listUniqueEventsArgsForCall)]
	fake.listUniqueEventsArgsForCall = append(fake.listUniqueEventsArgsForCall, struct {
		arg1 context.Context
		arg2 []uuid.UUID
	}{arg1, arg2Copy})
	stub := fake.ListUniqueEventsStub
	fakeReturns := fake.listUniqueEventsReturns
	fake.recordInvocation("ListUniqueEvents", []interface{}{arg1, arg2Copy})
	fake.listUniqueEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventLister) ListUniqueEventsCallCount() int {
	fake.listUniqueEventsMutex.RLock()
	defer fake.listUniqueEventsMutex.RUnlock()
	return len(fake.listUniqueEventsArgsForCall)
}

func (fake *FakeEventLister) ListUniqueEventsCalls(stub func(context.Context, []uuid.UUID) ([]feed.Event, error)) {
	fake.listUniqueEventsMutex.Lock()
	defer fake.listUniqueEventsMutex.Unlock()
	fake.ListUniqueEventsStub = stub
}

func (fake *FakeEventLister) ListUniqueEventsArgsForCall(i int) (context.Context, []uuid.UUID) {
	fake.listUniqueEventsMutex.RLock()
	defer fake.listUniqueEventsMutex.RUnlock()
	argsForCall := fake.listUniqueEventsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEventLister) ListUniqueEventsReturns(result1 []feed.Event, result2 error) {
	fake.listUniqueEventsMutex.Lock()
	defer fake.listUniqueEventsMutex.Unlock()
	fake.ListUniqueEventsStub = nil
	fake.listUniqueEventsReturns = struct {
		result1 []feed.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEventLister) ListUniqueEventsReturnsOnCall(i int, result1 []feed.Event, result2 error) {
	fake.listUniqueEventsMutex.Lock()
	defer fake.listUniqueEventsMutex.Unlock()
	fake.ListUniqueEventsStub = nil
	if fake.listUniqueEventsReturnsOnCall == nil {
		fake.listUniqueEventsReturnsOnCall = make(map[int]struct {
			result1 []feed.Event
			result2 error
		})
	}
	fake.listUniqueEventsReturnsOnCall[i] = struct {
		result1 []feed.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEventLister) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listUniqueEventsMutex.RLock()
	defer fake.listUniqueEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventLister) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ feed.EventLister = new(FakeEventLister)
