// Code generated by counterfeiter. DO NOT EDIT.
package feedfakes

import (
	"context"
	"sync"

	"github.com/sebnyberg/policefeed/feed"
)

type FakeEventCreator struct {
	CreateEventsStub        func(context.Context, []feed.Event) error
	createEventsMutex       sync.RWMutex
	createEventsArgsForCall []struct {
		arg1 context.Context
		arg2 []feed.Event
	}
	createEventsReturns struct {
		result1 error
	}
	createEventsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventCreator) CreateEvents(arg1 context.Context, arg2 []feed.Event) error {
	var arg2Copy []feed.Event
	if arg2 != nil {
		arg2Copy = make([]feed.Event, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createEventsMutex.Lock()
	ret, specificReturn := fake.createEventsReturnsOnCall[len(fake.createEventsArgsForCall)]
	fake.createEventsArgsForCall = append(fake.createEventsArgsForCall, struct {
		arg1 context.Context
		arg2 []feed.Event
	}{arg1, arg2Copy})
	stub := fake.CreateEventsStub
	fakeReturns := fake.createEventsReturns
	fake.recordInvocation("CreateEvents", []interface{}{arg1, arg2Copy})
	fake.createEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEventCreator) CreateEventsCallCount() int {
	fake.createEventsMutex.RLock()
	defer fake.createEventsMutex.RUnlock()
	return len(fake.createEventsArgsForCall)
}

func (fake *FakeEventCreator) CreateEventsCalls(stub func(context.Context, []feed.Event) error) {
	fake.createEventsMutex.Lock()
	defer fake.createEventsMutex.Unlock()
	fake.CreateEventsStub = stub
}

func (fake *FakeEventCreator) CreateEventsArgsForCall(i int) (context.Context, []feed.Event) {
	fake.createEventsMutex.RLock()
	defer fake.createEventsMutex.RUnlock()
	argsForCall := fake.createEventsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEventCreator) CreateEventsReturns(result1 error) {
	fake.createEventsMutex.Lock()
	defer fake.createEventsMutex.Unlock()
	fake.CreateEventsStub = nil
	fake.createEventsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventCreator) CreateEventsReturnsOnCall(i int, result1 error) {
	fake.createEventsMutex.Lock()
	defer fake.createEventsMutex.Unlock()
	fake.CreateEventsStub = nil
	if fake.createEventsReturnsOnCall == nil {
		fake.createEventsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createEventsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createEventsMutex.RLock()
	defer fake.createEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ feed.EventCreator = new(FakeEventCreator)
